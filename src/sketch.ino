// 21 dead
#include <SPI.h>
//while true; do stty -F /dev/ttyACM0 115200&&netcat -p 768 -l > /dev/ttyACM0; sleep 0.1; done
//while true; do date "+%H%M%S%d.%m.%n";echo -e "\n"; sleep 1; done | nc 10.55 768



static unsigned char font[] = {
   0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x28,
   0x10, 0x00, 0x18, 0x10, 0x20, 0x08, 0x10, 0x10, 0x00, 0x00, 0x00, 0x80,
   0x38, 0x10, 0x38, 0x38, 0x30, 0x7c, 0x38, 0x7c, 0x38, 0x38, 0x00, 0x00,
   0x20, 0x00, 0x04, 0x38, 0x38, 0x38, 0x3c, 0x38, 0x3c, 0x7c, 0x7c, 0x38,
   0x44, 0x38, 0x70, 0x44, 0x08, 0x82, 0x44, 0x38, 0x38, 0x38, 0x3c, 0x38,
   0x7c, 0x44, 0x44, 0x82, 0x44, 0x44, 0x7c, 0x38, 0x02, 0x38, 0x10, 0x00,
   0x08, 0x00, 0x08, 0x00, 0x40, 0x00, 0x30, 0x00, 0x04, 0x00, 0x00, 0x04,
   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x30, 0x10, 0x0c, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x28, 0x78, 0x4c, 0x14, 0x10,
   0x10, 0x10, 0x92, 0x10, 0x00, 0x00, 0x00, 0x40, 0x44, 0x18, 0x44, 0x44,
   0x28, 0x04, 0x44, 0x40, 0x44, 0x44, 0x30, 0x30, 0x10, 0x00, 0x08, 0x44,
   0x44, 0x44, 0x44, 0x44, 0x44, 0x04, 0x04, 0x44, 0x44, 0x10, 0x20, 0x44,
   0x08, 0xc6, 0x4c, 0x44, 0x48, 0x44, 0x44, 0x44, 0x10, 0x44, 0x44, 0x82,
   0x44, 0x44, 0x40, 0x08, 0x04, 0x20, 0x28, 0x00, 0x10, 0x38, 0x08, 0x00,
   0x40, 0x00, 0x48, 0x00, 0x04, 0x10, 0x10, 0x04, 0x10, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
   0x10, 0x10, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0xfe, 0x14, 0x2c, 0x08, 0x00, 0x08, 0x20, 0x54, 0x10,
   0x00, 0x00, 0x00, 0x20, 0x44, 0x10, 0x40, 0x40, 0x24, 0x04, 0x04, 0x20,
   0x44, 0x44, 0x30, 0x30, 0x08, 0xfe, 0x10, 0x40, 0x74, 0x44, 0x44, 0x04,
   0x44, 0x04, 0x04, 0x04, 0x44, 0x10, 0x20, 0x24, 0x08, 0xaa, 0x54, 0x44,
   0x48, 0x44, 0x44, 0x04, 0x10, 0x44, 0x44, 0x82, 0x28, 0x28, 0x20, 0x08,
   0x08, 0x20, 0x44, 0x00, 0x00, 0x40, 0x38, 0x38, 0x70, 0x38, 0x08, 0xb8,
   0x34, 0x00, 0x00, 0x24, 0x10, 0x6d, 0x34, 0x38, 0x34, 0x58, 0x34, 0x38,
   0x38, 0x24, 0x44, 0x82, 0x44, 0x48, 0x3c, 0x08, 0x10, 0x10, 0x0c, 0x00,
   0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x28,
   0x38, 0x10, 0x14, 0x00, 0x08, 0x20, 0x38, 0xfe, 0x00, 0xfe, 0x00, 0x10,
   0x54, 0x10, 0x20, 0x30, 0x7c, 0x3c, 0x3c, 0x10, 0x38, 0x78, 0x00, 0x00,
   0x04, 0x00, 0x20, 0x20, 0x54, 0x7c, 0x3c, 0x04, 0x44, 0x3c, 0x7c, 0x74,
   0x7c, 0x10, 0x20, 0x1c, 0x08, 0x92, 0x54, 0x44, 0x38, 0x44, 0x3c, 0x38,
   0x10, 0x44, 0x28, 0x54, 0x10, 0x10, 0x10, 0x08, 0x10, 0x20, 0x00, 0x00,
   0x00, 0x78, 0x48, 0x04, 0x48, 0x44, 0x1c, 0x44, 0x4c, 0x10, 0x10, 0x14,
   0x10, 0x92, 0x48, 0x44, 0x48, 0x24, 0x0c, 0x04, 0x10, 0x24, 0x44, 0x82,
   0x28, 0x48, 0x20, 0x04, 0x10, 0x20, 0x92, 0x00, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfe, 0x50, 0x68, 0x62, 0x00,
   0x08, 0x20, 0x54, 0x10, 0x30, 0x00, 0x00, 0x08, 0x44, 0x10, 0x10, 0x40,
   0x20, 0x40, 0x44, 0x08, 0x44, 0x40, 0x30, 0x30, 0x08, 0xfe, 0x10, 0x10,
   0x74, 0x44, 0x44, 0x04, 0x44, 0x04, 0x04, 0x44, 0x44, 0x10, 0x24, 0x24,
   0x08, 0x82, 0x64, 0x44, 0x08, 0x44, 0x14, 0x40, 0x10, 0x44, 0x28, 0x54,
   0x28, 0x10, 0x08, 0x08, 0x20, 0x20, 0x00, 0x00, 0x00, 0x44, 0x48, 0x04,
   0x48, 0x7c, 0x08, 0x44, 0x44, 0x10, 0x10, 0x0c, 0x10, 0x92, 0x48, 0x44,
   0x48, 0x24, 0x04, 0x18, 0x10, 0x24, 0x44, 0x92, 0x10, 0x48, 0x10, 0x08,
   0x10, 0x10, 0x60, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x28, 0x3c, 0x64, 0x22, 0x00, 0x10, 0x10, 0x92, 0x10,
   0x30, 0x00, 0x30, 0x04, 0x44, 0x10, 0x08, 0x44, 0x20, 0x44, 0x44, 0x08,
   0x44, 0x44, 0x30, 0x30, 0x10, 0x00, 0x08, 0x00, 0x04, 0x44, 0x44, 0x44,
   0x44, 0x04, 0x04, 0x44, 0x44, 0x10, 0x24, 0x44, 0x08, 0x82, 0x44, 0x44,
   0x08, 0x44, 0x24, 0x44, 0x10, 0x44, 0x10, 0x28, 0x44, 0x10, 0x04, 0x08,
   0x40, 0x20, 0x00, 0x00, 0x00, 0x44, 0x48, 0x04, 0x48, 0x04, 0x08, 0x78,
   0x44, 0x10, 0x10, 0x14, 0x10, 0x82, 0x48, 0x44, 0x38, 0x38, 0x04, 0x20,
   0x10, 0x24, 0x28, 0xaa, 0x28, 0x70, 0x08, 0x08, 0x10, 0x10, 0x00, 0x00,
   0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x28,
   0x10, 0x00, 0x5c, 0x00, 0x20, 0x08, 0x10, 0x10, 0x20, 0x00, 0x30, 0x02,
   0x38, 0x38, 0x7c, 0x38, 0x70, 0x38, 0x38, 0x08, 0x38, 0x38, 0x00, 0x20,
   0x20, 0x00, 0x04, 0x10, 0x38, 0x44, 0x3c, 0x38, 0x3c, 0x7c, 0x04, 0x38,
   0x44, 0x38, 0x18, 0x44, 0x78, 0x82, 0x44, 0x38, 0x08, 0x38, 0x44, 0x38,
   0x10, 0x38, 0x10, 0x28, 0x44, 0x10, 0x7c, 0x38, 0x80, 0x38, 0x00, 0x00,
   0x00, 0xb8, 0x34, 0x38, 0xb0, 0x38, 0x08, 0x40, 0x44, 0x10, 0x10, 0x24,
   0x10, 0x82, 0x48, 0x38, 0x08, 0x20, 0x04, 0x1c, 0x10, 0x58, 0x10, 0x44,
   0x44, 0x40, 0x3c, 0x30, 0x10, 0x0c, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

   // http://overcode.yak.net






const int L = 2; // levels of brightness
const int frames = (1<<L)-1; // the least bright led will go on only once in this many redraws of the display
byte la[frames*2]; //selects one of L layers, each populated by on and off states of leds, the full bright led will be set on in all of the layers, the least bright only in the last, least displayed one. it says that the least bright layer is only displayed once, in the middle of the frames cycle
byte rnd[6][16]; // random frame offset to reduce flicker
char text[13] = "nc 10.55 768";
int lasttext; // a downward counter thats set high after a serial read
int te; // cursor



const int A = A2;
const int B = A3;
const int ST =A5;
const int OE =A4;




/*

int oo(int x)
{
    return x<12 || (x > 23 && x < 36);
}
int g(int x)
{
    return (x > 23 && x < 36);
}
int r(int x)
{
    return (x > 35);
}
*/





/*
byte leds[L][6][16];
//byte dirs[6][16];


void led(int x, int y, int b)
{
    int l;
    for(l=0;l<L;l++)
    {
	if (b >= L-l)
            leds[l][x/8][y] &=~ (1<<(x%8));
    	else
    	    leds[l][x/8][y] |=  (1<<(x%8));
    }
}


int getled(int x, int y)
{
    int l;
    for(l=0;l<L;l++)
	if (!(leds[l][x/8][y] & (1<<(x%8))))
	    return L-l;
    return 0;
}




void animate()
{
    static int i,j;
    led(i,j,  r(i));
    i = ++i;
    if(i > 47)
    {
	i = 0;
	j = ++j % 14;
    }
}



unsigned long fps;
unsigned long fpS;
void fps_bar()
{
    static byte i;
    static int bar;
    static unsigned long now, then, lastfps;
    led(i,15, (bar >= i));
    led(i,14, ((1l<<(47-i))&lastfps));
    i++;
    if(i>47)
    {
	bar = fps*5/((now = millis()) - then);
	lastfps = fpS*1000/now;
	then = now;
	fps = 0;
	i=0;
    };
}



typedef struct
{
    int a,b;
    int x,y;

} particle;
const int PS = 1;
particle ps[PS];


void wrap(int i)
{
        if(ps[i].x>47)
		ps[i].x=0;
        if(ps[i].x<0)
		ps[i].x=47;
        if(ps[i].y>15)
		ps[i].y=0;
        if(ps[i].y<0)
		ps[i].y=15;
}

void bounce(int i)
{
        if(ps[i].x>46)
		ps[i].a=-ps[i].a;
        if(ps[i].x<1)
		ps[i].a=-ps[i].a;
        if(ps[i].y>12)
		ps[i].b=-ps[i].b;
        if(ps[i].y<1)
		ps[i].b=-ps[i].b;
}



void boing()
{
    int i;
    for (i=0;i<PS;i++)
    {
    	led(ps[i].x,ps[i].y,0);
	bounce(i);
        ps[i].x+=ps[i].a;
	ps[i].y+=ps[i].b;
        led(ps[i].x,ps[i].y,1+!oo(ps[i].x));
    }
}



void setupleds()
{
    int i,j;
    	for(i = 0; i < 6*8; i++)
	{
	    int o = ( i > 40 );
    	    for(j = 0; j < 16; j++)
		led(i,j, 0);
	}


    for (i=0;i<PS;i++)
    {
        ps[i].a=-2*random(2)+1;
        ps[i].b=-2+random(2)+1;
        ps[i].x=random(46)+1;
        ps[i].y=random(11)+1;
    }
}
*/











void setuplayers()
{
	int f;
	for(f=0;f<frames;f++)
	{
            int lap=0;
	    while(lap!=L-1)
            {
		    if(f & (1<<lap))
			break;
		    lap++;
            }
            la[f]=lap;
        }
}





void setup()
{
    pinMode(A,OUTPUT);
    pinMode(B,OUTPUT);
    pinMode(ST,OUTPUT);
    pinMode(OE,OUTPUT);
    digitalWrite(OE, 1);
    pinMode(A5, INPUT);
    randomSeed(analogRead(A5));
    SPI.setClockDivider(128);
    SPI.setBitOrder(LSBFIRST);
    Serial.begin(57600);
    setuplayers();
    SPI.begin();

    int i,j;
    for(i=0;i<6;i++)
	for(j=0;j<16;j++)
	    rnd[i][j] = random(frames-1)+1;
    
}

void textin()
{

	if(lasttext < 19 && Serial.available())
	{
		char in  =  Serial.read();
		static char lastchar;
		if (in != 10)
		{
		    text[te] = in;
		    if(++te>11)
			te = 0;
		}
		else
		{
			te = 0;
			if (lastchar == 10)
			{
			    int i;
			    for (i=0;i<12;i++)
				text[i]=' ';
			}
		}
		lasttext = 20;
		lastchar=in;
	}
	if(lasttext)
		lasttext--;

}

byte row,frame=1,oldframe = frames;
unsigned long fps;
void loop()
{
    PORTC = 0b010000 | (row<<2);

    int i,j;
    for(i = 0; i < 6; i++)
        for(j = 0; j < 4; j++)
        {
    	    int y = row+j*4;
//    	    int b = la[L-1];// ( rnd[i][j] + frame)];
	    SPI.transfer((rnd[i][j] == frame) ?  random(255) : 255);
//	    SPI.transfer(leds[b][i][row+j*4]);
//	    byte cursor = (((y%8==7)   &&    (te/6==y/8)    &&    (te%6==i))    ?   ~lasttext    :    0xff);
//	    char ch  = text[i+y/8*6];
//	    SPI.transfer(ch);
//	    SPI.transfer(~font[ ch + (128*(y%8)) ]);
//	    SPI.transfer(~font[ ch + (128*(y%8)) ] | ((rnd[i][j] != frame)?0b11111111:0));
//	    SPI.transfer(~font[ ch + (128*(y%8)) ] | ((rnd[i][j] != frame)*0b10101010) | ((rnd[i][j] != oldframe)*0b01010101));

	}

/*A5 PC5 storage
A4 PC4 OD
A3 PC3 B
A2 PC2 A
*/
    PORTC = 0b100000 | (row<<2);

    if(3==row)
    {
        if (++frame > frames)
        {
	    frame = 1;
//	    textin();
	    snprintf(text, 13,"%012d",  millis());// / ++fps
	}
    	oldframe = frame;
    }

    if(3==row++)
	row = 0;
    
}


